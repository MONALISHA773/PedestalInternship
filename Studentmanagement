#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <algorithm>

using namespace std;

// Structure for student data
struct Student {
    int rollNo;
    string name;
    float marks;
    char grade;
};

// Function declarations
void addStudent();
void viewStudents();
void searchStudent(int rollNo);
void updateStudent(int rollNo);
void deleteStudent(int rollNo);
void sortStudentsByMarks();
void sortStudentsByName();
void displayStudent(const Student &s);
void saveToFile(const vector<Student> &students);
vector<Student> loadFromFile();
char calculateGrade(float marks);

int main() {
    int choice, rollNo;
    
    while (true) {
        cout << "\nStudent Record Management System\n";
        cout << "1. Add Student\n";
        cout << "2. View Students\n";
        cout << "3. Search Student\n";
        cout << "4. Update Student\n";
        cout << "5. Delete Student\n";
        cout << "6. Sort Students by Marks\n";
        cout << "7. Sort Students by Name\n";
        cout << "8. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;
        
        switch (choice) {
            case 1:
                addStudent();
                break;
            case 2:
                viewStudents();
                break;
            case 3:
                cout << "Enter roll number to search: ";
                cin >> rollNo;
                searchStudent(rollNo);
                break;
            case 4:
                cout << "Enter roll number to update: ";
                cin >> rollNo;
                updateStudent(rollNo);
                break;
            case 5:
                cout << "Enter roll number to delete: ";
                cin >> rollNo;
                deleteStudent(rollNo);
                break;
            case 6:
                sortStudentsByMarks();
                break;
            case 7:
                sortStudentsByName();
                break;
            case 8:
                cout << "Exiting program...\n";
                return 0;
            default:
                cout << "Invalid choice! Try again.\n";
        }
    }

    return 0;
}

// Function to add a student record
void addStudent() {
    Student s;
    cout << "Enter Roll No: ";
    cin >> s.rollNo;
    cout << "Enter Name: ";
    cin.ignore(); // To ignore the newline left by previous input
    getline(cin, s.name);
    cout << "Enter Marks: ";
    cin >> s.marks;
    s.grade = calculateGrade(s.marks);

    vector<Student> students = loadFromFile();
    students.push_back(s);
    saveToFile(students);

    cout << "Student record added successfully.\n";
}

// Function to view all student records
void viewStudents() {
    vector<Student> students = loadFromFile();
    if (students.empty()) {
        cout << "No student records found.\n";
        return;
    }

    for (const Student &s : students) {
        displayStudent(s);
    }
}

// Function to search for a student by roll number
void searchStudent(int rollNo) {
    vector<Student> students = loadFromFile();
    bool found = false;
    for (const Student &s : students) {
        if (s.rollNo == rollNo) {
            displayStudent(s);
            found = true;
            break;
        }
    }

    if (!found) {
        cout << "Student not found.\n";
    }
}

// Function to update student record by roll number
void updateStudent(int rollNo) {
    vector<Student> students = loadFromFile();
    bool found = false;

    for (Student &s : students) {
        if (s.rollNo == rollNo) {
            cout << "Enter new Name: ";
            cin.ignore();
            getline(cin, s.name);
            cout << "Enter new Marks: ";
            cin >> s.marks;
            s.grade = calculateGrade(s.marks);
            found = true;
            break;
        }
    }

    if (found) {
        saveToFile(students);
        cout << "Student record updated successfully.\n";
    } else {
        cout << "Student not found.\n";
    }
}

// Function to delete student record by roll number
void deleteStudent(int rollNo) {
    vector<Student> students = loadFromFile();
    bool found = false;
    for (auto it = students.begin(); it != students.end(); ++it) {
        if (it->rollNo == rollNo) {
            students.erase(it);
            found = true;
            break;
        }
    }

    if (found) {
        saveToFile(students);
        cout << "Student record deleted successfully.\n";
    } else {
        cout << "Student not found.\n";
    }
}

// Function to sort students by marks
void sortStudentsByMarks() {
    vector<Student> students = loadFromFile();
    if (students.empty()) {
        cout << "No student records found.\n";
        return;
    }

    sort(students.begin(), students.end(), [](const Student &a, const Student &b) {
        return a.marks > b.marks; // Sort in descending order of marks
    });

    cout << "Students sorted by marks:\n";
    for (const Student &s : students) {
        displayStudent(s);
    }
}

// Function to sort students by name
void sortStudentsByName() {
    vector<Student> students = loadFromFile();
    if (students.empty()) {
        cout << "No student records found.\n";
        return;
    }

    sort(students.begin(), students.end(), [](const Student &a, const Student &b) {
        return a.name < b.name; // Sort in alphabetical order of name
    });

    cout << "Students sorted by name:\n";
    for (const Student &s : students) {
        displayStudent(s);
    }
}

// Function to display student data
void displayStudent(const Student &s) {
    cout << "Roll No: " << s.rollNo << "\n";
    cout << "Name: " << s.name << "\n";
    cout << "Marks: " << s.marks << "\n";
    cout << "Grade: " << s.grade << "\n";
    cout << "--------------------------\n";
}

// Function to save the student data to a file
void saveToFile(const vector<Student> &students) {
    ofstream file("students.dat", ios::binary);
    for (const Student &s : students) {
        file.write(reinterpret_cast<const char*>(&s), sizeof(Student));
    }
}

// Function to load student data from the file
vector<Student> loadFromFile() {
    vector<Student> students;
    ifstream file("students.dat", ios::binary);
    Student s;
    while (file.read(reinterpret_cast<char*>(&s), sizeof(Student))) {
        students.push_back(s);
    }
    return students;
}

// Function to calculate grade based on marks
char calculateGrade(float marks) {
    if (marks >= 90) return 'A';
    else if (marks >= 75) return 'B';
    else if (marks >= 60) return 'C';
    else if (marks >= 50) return 'D';
    else return 'F';
}
